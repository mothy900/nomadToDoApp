{"version":3,"sources":["color.js","App.js"],"names":["theme","App","useState","loading","setLoading","working","setWorking","text","setText","done","setDone","editKey","setEditKey","editText","setEditText","toDos","setToDos","useEffect","loadToDos","saveWorking","satate","a","async","w","JSON","stringify","console","log","AsyncStorage","setItem","saveToDos","toSave","s","getItem","parse","onChangeEdit","event","View","style","styles","container","StatusBar","header","TouchableOpacity","Text","fontSize","fontWeight","color","onPress","TextInput","clearTextOnFocus","onSubmitEditing","newToDos","Date","now","onChangeText","returnKeyType","defaultValue","placeholder","input","value","loadingText","ActivityIndicator","size","ScrollView","Object","keys","map","key","toDo","toDoCheck","Pressable","hitSlop","checkBox","doneToDo","Fontisto","name","toDoText","autoFocus","editable","editToDOText","iconButton","bottom","left","right","top","editTodo","EvilIcons","Platform","OS","confirm","Alert","alert","deletToDo","FontAwesome5","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","marginTop","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems","toDoneText","writingDirection","height","paddingRight","width"],"mappings":"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","file":"static/js/app.790acffa.chunk.js","sourcesContent":["export const theme = {\r\n  bg: \"black\",\r\n  grey: \"#3A3D40\",\r\n  toDoBg: \"#5C5C60\",\r\n};\r\n","import { StatusBar } from \"expo-status-bar\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  TextInput,\n  ScrollView,\n  ActivityIndicator,\n  Alert,\n  Pressable,\n  Platform,\n} from \"react-native\";\nimport React, { useState, useEffect } from \"react\";\nimport { theme } from \"./color\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { FontAwesome5 } from \"@expo/vector-icons\";\nimport { Fontisto } from \"@expo/vector-icons\";\nimport { EvilIcons } from \"@expo/vector-icons\";\nconst STORAGE_KEY = \"@toDo\";\nconst STATE_KEY = \"@working\";\n\nexport default function App() {\n  const [loading, setLoading] = useState(true);\n  const [working, setWorking] = useState(\"\");\n  const [text, setText] = useState(\"\");\n  const [done, setDone] = useState(false);\n  const [editKey, setEditKey] = useState(false);\n  const [editText, setEditText] = useState(\"\");\n  const [toDos, setToDos] = useState({}); //여기에 Array를 넣기도 하지만 이번 프로젝트에선 hashmap 을 만들것\n\n  useEffect(() => {\n    // 화면 켜지자마자 실행\n\n    loadToDos();\n\n    setLoading(false);\n  }, []);\n\n  const saveWorking = async (satate) => {\n    const w = JSON.stringify(satate);\n    console.log(\"save : \", w);\n    await AsyncStorage.setItem(STATE_KEY, w);\n  };\n  const travel = () => {\n    setWorking(false);\n    saveWorking(false);\n  };\n  const work = () => {\n    setWorking(true);\n    saveWorking(true);\n  };\n\n  const onChangeText = (event) => {\n    setText(event);\n  };\n  const saveToDos = async (toSave) => {\n    try {\n      const s = JSON.stringify(toSave); // object를 string으로 변환\n      await AsyncStorage.setItem(STORAGE_KEY, s);\n      console.log(s);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const loadToDos = async () => {\n    try {\n      const s = await AsyncStorage.getItem(STORAGE_KEY);\n      console.log(\"laod : \", s);\n      if (s === null) {\n        setToDos();\n      }\n      setToDos(JSON.parse(s)); //JSON.parse 로 원 형태로 복귀\n      const w = await AsyncStorage.getItem(STATE_KEY);\n      if (w === null) {\n        setWorking(true);\n      }\n      setWorking(JSON.parse(w));\n    } catch (e) {\n      console.log(\"Error : \", e);\n    }\n  };\n\n  const addToDo = async () => {\n    if (text === \"\") {\n      return;\n    }\n    setDone(false);\n    // ToDos 라는 배열에 추가하기.\n    //const newToDos = Object.assign({}, toDos, {\n    //[Date.now()]: { text, work: working }, // https://nomadcoders.co/react-native-for-beginners/lectures/3133 제대로 익히기\n    //});\n\n    //위 주석과 같은 내용\n    const newToDos = {\n      ...toDos,\n      [Date.now()]: { text, working, done }, //key를 만들어서  기존의 오브젝트에다가 새로운 오브젝트를 만들고 싶음\n    };\n    setToDos(newToDos);\n    await saveToDos(newToDos);\n    setText(\"\");\n  };\n  //console.log(toDos);\n  const deletToDo = (key) => {\n    if (Platform.OS === \"web\") {\n      const ok = confirm(\"Do you want to delete this To-Do?\");\n      if (ok) {\n        const newToDos = { ...toDos }; ///2.하지만 여기서 state의 내용으로 새로운 object를 만들고 있음. 그 내용 때문에 ...를 사용함, 그래서 state의 내용으로 새로운 object를 만듦\n        delete newToDos[key];\n        setToDos(newToDos); // 1. state 는 mutate를 해주면 안되기 때문에\n        saveToDos(newToDos);\n      }\n    } else {\n      Alert.alert(\n        `${working === true ? \"Delete To Do\" : \"Delete To Travel\"}`, // work, travel에 따라 삭제문구 변경\n        \"Are you sure?\",\n        [\n          { text: \"Cancel\" },\n          {\n            text: \"Yes I'm sure\",\n            style: \"destructive\",\n            onPress: () => {\n              const newToDos = { ...toDos }; ///2.하지만 여기서 state의 내용으로 새로운 object를 만들고 있음. 그 내용 때문에 ...를 사용함, 그래서 state의 내용으로 새로운 object를 만듦\n              delete newToDos[key];\n              setToDos(newToDos); // 1. state 는 mutate를 해주면 안되기 때문에\n              saveToDos(newToDos);\n            },\n          },\n        ]\n      );\n    }\n    return;\n  };\n  const doneToDo = (key) => {\n    done === true ? setDone(false) : setDone(true);\n    toDos[key].done = !toDos[key].done;\n    console.log(\"toDo : \", toDos[key].done);\n  };\n  const editTodo = (key) => {\n    if (key == editKey) {\n      setEditKey(\"\");\n    } else {\n      setEditKey(key);\n    }\n  };\n  const editToDOText = (key) => {\n    toDos[key].text = editText;\n    setEditKey(\"\");\n  };\n  const onChangeEdit = (event) => {\n    setEditText(event);\n    console.log(editText);\n  };\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"auto\" />\n      <View style={styles.header}>\n        <TouchableOpacity>\n          <Text\n            style={{\n              fontSize: 38,\n              fontWeight: \"600\",\n              color: working ? \"white\" : theme.grey,\n            }}\n            onPress={work}\n          >\n            Work~\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity>\n          <Text\n            style={{\n              fontSize: 38,\n              fontWeight: \"600\",\n              color: working ? theme.grey : \"white\",\n            }}\n            onPress={travel}\n          >\n            Travel!\n          </Text>\n        </TouchableOpacity>\n      </View>\n      <View>\n        <TextInput\n          clearTextOnFocus={true}\n          onSubmitEditing={addToDo}\n          onChangeText={onChangeText}\n          returnKeyType=\"done\"\n          defaultValue=\"\"\n          //multiline={true}\n          placeholder={working ? \"Add a To do\" : \"Where do you want to go?\"}\n          style={styles.input}\n          value={text}\n        />\n      </View>\n      {loading === true ? ( //로딩창\n        <View style={styles.loading}>\n          <Text style={styles.loadingText}>\n            <ActivityIndicator size=\"small\" color=\"#ffffff\" /> Loading...\n          </Text>\n        </View>\n      ) : (\n        <ScrollView>\n          {Object.keys(toDos).map((key) =>\n            toDos[key].working === working ? ( // true === ture , false === flase  형태로 비교\n              <View style={styles.toDo} key={key}>\n                <View style={styles.toDoCheck}>\n                  <Pressable\n                    hitSlop={20}\n                    style={styles.checkBox}\n                    onPress={() => {\n                      doneToDo(key);\n                    }}\n                  >\n                    {toDos[key].done === false ? (\n                      <Fontisto\n                        name=\"checkbox-passive\"\n                        size={16}\n                        color=\"white\"\n                      />\n                    ) : (\n                      <Fontisto\n                        name=\"checkbox-active\"\n                        size={16}\n                        color=\"white\"\n                      />\n                    )}\n                  </Pressable>\n                  {editKey === key ? (\n                    <TextInput\n                      style={styles.toDoText}\n                      autoFocus={true}\n                      editable={true}\n                      returnKeyType=\"done\"\n                      onSubmitEditing={() => {\n                        editToDOText(key);\n                      }}\n                      onChangeText={onChangeEdit}\n                    ></TextInput>\n                  ) : (\n                    <Text style={styles.toDoText}>{toDos[key].text}</Text>\n                  )}\n                </View>\n                <View style={styles.iconButton}>\n                  <Pressable\n                    hitSlop={{ bottom: 20, left: 20, right: 0, top: 20 }}\n                  >\n                    <TouchableOpacity\n                      onPress={() => {\n                        editTodo(key);\n                      }}\n                    >\n                      <EvilIcons name=\"pencil\" size={24} color=\"white\" />\n                    </TouchableOpacity>\n                  </Pressable>\n                  <Pressable\n                    hitSlop={{ bottom: 20, left: 0, right: 20, top: 20 }}\n                  >\n                    <TouchableOpacity\n                      onPress={() => {\n                        deletToDo(key);\n                      }}\n                    >\n                      <FontAwesome5\n                        name=\"trash-alt\"\n                        size={18}\n                        color={theme.grey}\n                      />\n                    </TouchableOpacity>\n                  </Pressable>\n                </View>\n              </View>\n            ) : null\n          )}\n        </ScrollView>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    marginTop: 100,\n  },\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 15,\n    paddingHorizontal: 20,\n    borderRadius: 30,\n    marginVertical: 20,\n    fontSize: 18,\n  },\n  toDo: {\n    backgroundColor: theme.toDoBg,\n    marginBottom: 10,\n    paddingVertical: 20,\n    paddingHorizontal: 20,\n    borderRadius: 15,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n\n  toDoText: {\n    color: \"white\",\n    fontSize: 16,\n    fontWeight: \"500\",\n  },\n  toDoneText: {\n    color: theme.grey,\n    fontSize: 16,\n    fontWeight: \"500\",\n    writingDirection: \"rtl\",\n  },\n  loading: {\n    height: \"20%\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  loadingText: {\n    color: \"white\",\n    fontSize: 22,\n  },\n  checkBox: { alignItems: \"center\", paddingRight: 7 },\n  iconButton: {\n    width: \"20%\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n  },\n  toDoCheck: {\n    width: \"70%\",\n    flexDirection: \"row\",\n  },\n});\n\n// 1. todo, trevel 끌때랑 킬때랑 같은 항목 - check\n// 2. todo -완료 기능\n// 3. edit text\n// 4. done 기능 setDone 재설정\n// 5. edit 2번 누르면 행동 불능 오류 수정\n"],"sourceRoot":""}